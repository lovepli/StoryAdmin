<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.story.storyadmin.mapper.children.DCourseMapper">

    <resultMap type="com.story.storyadmin.domain.entity.children.DCourse" id="BaseResultMap">
        <id     property="id"     column="c_id"     />
        <result property="name"   column="c_name"   />
        <result property="teacherId"  column="teacher_id"   />
    </resultMap>

    <sql id="Base_Column_List">
        c_id,c_name,teacher_id
    </sql>


    <select id="findByPage" parameterType="com.alibaba.fastjson.JSONObject" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        d_course
    </select>



<!--1、根据课程id查询课程信息(带老师的信息)-->
    <!--
19     方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集
20              封装联表查询的数据(去除重复的数据)
21         select * from d_course c, d_teacher t where c.teacher_id=t.t_id and c.c_id=1
22     -->
        <select id="getCourse" parameterType="java.lang.String" resultMap="CourseResultMap">
            select * from d_course c, d_teacher t where c.teacher_id=t.t_id and c.c_id=#{id}
        </select>
        <!-- 使用resultMap映射实体类和字段之间的一一对应关系 -->
        <resultMap type="com.story.storyadmin.domain.entity.children.CourseDTO" id="CourseResultMap">
            <id property="id" column="c_id"/>
            <result property="name" column="c_name"/>
            <association property="teacher" javaType="com.story.storyadmin.domain.entity.children.DTeacher">
                <id property="id" column="t_id"/>
                <result property="name" column="t_name"/>
            </association>
        </resultMap>

    <!--
37     方式二：嵌套查询：通过执行另外一个SQL映射语句来返回预期的复杂类型
38         SELECT * FROM class WHERE c_id=1;
39         SELECT * FROM teacher WHERE t_id=1   //1 是上一个查询得到的teacher_id的值
40     -->
        <select id="getCourse2" parameterType="java.lang.String" resultMap="CourseResultMap2">
           select * from d_course where c_id=#{id}
        </select>
        <!-- 使用resultMap映射实体类和字段之间的一一对应关系 -->
        <resultMap type="com.story.storyadmin.domain.entity.children.CourseDTO" id="CourseResultMap2">
           <id property="id" column="c_id"/>
           <result property="name" column="c_name"/>
<!--            怎么引入teacher.xml中的这个getTeacher方法？-->
           <association property="teacher" column="teacher_id" select="getTeacher"/>
        </resultMap>

<!--    这里复制一份getTeacher方法-->
    <select id="getTeacher" parameterType="java.lang.String" resultType="com.story.storyadmin.domain.entity.children.DTeacher">
        SELECT t_id, t_name FROM d_teacher WHERE t_id=#{id}
    </select>

<!--    MyBatis一对一关联查询总结
　　MyBatis中使用association标签来解决一对一的关联查询，association标签可用的属性如下：
property:对象属性的名称
javaType:对象属性的类型
column:所对应的外键字段名称
select:使用另一个查询封装的结果-->


    <!--
         根据课程Id查询对应的课程信息,包括学生,老师
      -->
    <!--
     方式一: 嵌套结果: 使用嵌套结果映射来处理重复的联合结果的子集
       select * from d_course c, d_teacher t,d_student s , d_score ds where c.teacher_id=t.id and ds.course_id=c.id and ds.id= s.id and  c.id='0001'
      -->
      <select id="getCourse3" parameterType="java.lang.String" resultMap="CourseResultMap3">
          select * from d_course c, d_teacher t,d_student s , d_score ds where c.teacher_id=t.t_id and ds.course_id=c.c_id and ds.ds_id= s.s_id and c.c_id=#{id}
       </select>
       <resultMap type="com.story.storyadmin.domain.entity.children.CourseDTO2" id="CourseResultMap3">
           <id property="id" column="c_id"/>
           <result property="name" column="c_name"/>
           <association property="teacher" column="teacher_id" javaType="com.story.storyadmin.domain.entity.children.DTeacher">
               <id property="id" column="t_id"/>
               <result property="name" column="t_name"/>
           </association>
           <!-- ofType指定students集合中的对象类型 -->
           <collection property="students" ofType="com.story.storyadmin.domain.entity.children.DStudent">
               <id property="id" column="s_id"/>
               <result property="name" column="s_name"/>
               <result property="birthday"   column="s_birthday"   />
               <result property="sex"  column="s_sex"   />
           </collection>
       </resultMap>

<!--     根据课程Id查询对应的课程信息,包括学生,分数,老师-->
    <select id="getCourse33" parameterType="java.lang.String" resultMap="CourseResultMap33">
        select * from d_course c, d_teacher t,d_student s , d_score ds where c.teacher_id=t.t_id and ds.course_id=c.c_id and ds.ds_id= s.s_id and c.c_id=#{id}
    </select>
    <resultMap type="com.story.storyadmin.domain.entity.children.CourseDTO3" id="CourseResultMap33">
        <id property="id" column="c_id"/>
        <result property="name" column="c_name"/>
        <association property="teacher" column="teacher_id" javaType="com.story.storyadmin.domain.entity.children.DTeacher">
            <id property="id" column="t_id"/>
            <result property="name" column="t_name"/>
        </association>
        <association property="score" column="teacher_id" javaType="com.story.storyadmin.domain.entity.children.DScore">
            <id property="id" column="ds_id"/>
            <result property="score" column="ds_score"/>
            <result property="courseId" column="course_id"/>
        </association>
        <!-- ofType指定students集合中的对象类型 -->
        <collection property="students" ofType="com.story.storyadmin.domain.entity.children.DStudent">
            <id property="id" column="s_id"/>
            <result property="name" column="s_name"/>
            <result property="birthday"   column="s_birthday"   />
            <result property="sex"  column="s_sex"   />
        </collection>
    </resultMap>


    <!--
        方式二：嵌套查询：通过执行另外一个SQL映射语句来返回预期的复杂类型
            SELECT * FROM class WHERE c_id=1;
            SELECT * FROM teacher WHERE t_id=1   //1 是上一个查询得到的teacher_id的值
            SELECT * FROM student WHERE class_id=1  //1是第一个查询得到的c_id字段的值
     -->
       <select id="getCourse4" parameterType="java.lang.String" resultMap="CourseResultMap4">
          select * from d_course where c_id=#{id}
       </select>
       <resultMap type="com.story.storyadmin.domain.entity.children.CourseDTO3" id="CourseResultMap4">
          <id property="id" column="c_id"/>
          <result property="name" column="c_name"/>
          <association property="teacher" column="teacher_id" javaType="com.story.storyadmin.domain.entity.children.DTeacher" select="getTeacher2">
          </association>
          <association property="score" column="c_id" javaType="com.story.storyadmin.domain.entity.children.DScore" select="getScore">

          </association>
          <collection property="students" column="ds_id" ofType="com.story.storyadmin.domain.entity.children.DStudent"  select="getStudent"></collection>
       </resultMap>
       <select id="getTeacher2" parameterType="java.lang.String" resultType="com.story.storyadmin.domain.entity.children.DTeacher">
          SELECT t_id, t_name FROM d_teacher WHERE t_id=#{id}
       </select>
    <select id="getScore" parameterType="java.lang.String" resultType="com.story.storyadmin.domain.entity.children.DScore">
        SELECT ds_id, ds_score, course_id FROM d_score WHERE ds_id=#{id}
    </select>
       <select id="getStudent" parameterType="java.lang.String" resultType="com.story.storyadmin.domain.entity.children.DStudent">
          SELECT s_id, s_name FROM d_student WHERE s_id=#{id}
       </select>



</mapper>
