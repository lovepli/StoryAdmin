<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.story.storyadmin.mapper.sysmgr.UserMapper">

    <!-- 用户信息：开启mybatis二级缓存 -->
<!-- 参考：https://blog.csdn.net/vcj1009784814/article/details/102978287-->
    <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>

    <resultMap type="com.story.storyadmin.domain.entity.sysmgr.User"  id="BaseResultMap" >
        <id     property="id"     column="id"     />
        <result property="account"   column="account"   />
        <result property="name"  column="name"   />

<!--        <result property="age"  column="age"   />-->
        <result property="birthday"  column="birthday"   />
        <result property="phone"  column="phone"   />
        <result property="sex"  column="sex"   />

        <result property="avatar"   column="avatar"   />
        <result property="password"   column="password"   />
        <result property="email"     column="email"      />
        <result property="lastPwdModifiedTime"      column="last_pwd_modified_time"       />
        <result property="status"      column="status"       />
        <result property="erpFlag"     column="erp_flag"      />
        <result property="ynFlag"      column="yn_flag"       />
        <result property="creator"     column="creator"      />
        <result property="editor"      column="editor"       />
        <result property="createdTime"     column="created_time"      />
        <result property="modifiedTime"      column="modified_time"       />
    </resultMap>

    <resultMap type="map"  id="BaseResultMap2" >
    </resultMap>

    <!-- 查询字段 -->
    <sql id="Base_Column_List">
        ID,account,name,birthday,phone,sex,avatar,password,email,last_pwd_modified_time,status,erp_flag,yn_flag,creator,editor,created_time,modified_time
    </sql>

    <!-- 查询条件 -->
    <sql id="Example_Where_Clause">
        where 1=1
        <trim suffixOverrides=",">
            <if test="id != null ">
                and id = #{id}
            </if>
            <if test="account != null and account != ''">
                and account = #{account}
            </if>
            <if test="name != null and name != ''">
                and name = #{name}
            </if>
            <if test="avatar != null and avatar != '' ">
                and avatar = #{avatar}
            </if>
            <if test="password != null and password != ''">
                and password = #{password}
            </if>
            <if test="email != null and email != ''">
                and email = #{email}
            </if>
            <if test="lastPwdModifiedTime != null and lastPwdModifiedTime != ''">
                and last_pwd_modified_time = #{lastPwdModifiedTime}
            </if>
            <if test="status != null and status != '' ">
                and status = #{status}
            </if>
            <if test="erpFlag != null and erpFlag != ''">
                and erp_flag = #{erpFlag}
            </if>
            <if test="ynFlag != null and ynFlag != ''">
                and yn_flag = #{ynFlag}
            </if>
            <if test="creator != null and creator != ''">
                and creator = #{creator}
            </if>
            <if test="editor != null and editor != '' ">
                and editor = #{editor}
            </if>
            <if test="createdTime != null ">
                and created_time = #{createdTime}
            </if>
            <if test="modifiedTime != null ">
                and modified_time = #{modifiedTime}
            </if>
        </trim>
    </sql>

    <!--根据角色ID获取权限 角色为有效的-->
    <select id="selectRoleByUserId" resultType="Long">
        SELECT
          role_id
        FROM   st_user_role
        where user_id= #{userId}
              and yn_flag='1'
    </select>

    <!--根据用户名名查询所有角色名 distinct 不重复的-->
    <select id="selectRoleByAccount" resultType="String">
        SELECT
         distinct r.name
        FROM   st_user u,st_role r,st_user_role ur
        where u.id=ur.user_id and r.id=ur.role_id
        and u.name=#{userName}
    </select>

    <!--根据UserId删除 这里的删除是进行修改操作的逻辑删除 将yn_flag置为0 无效-->
    <update id="deleteRoleByUserId" parameterType="com.story.storyadmin.domain.entity.sysmgr.UserRole">
      update st_user_role
      set yn_flag='0',
      editor=#{editor},
      modified_time=#{modifiedTime}
      where user_id= #{userId}
            and yn_flag='1'
    </update>

    <!--批量新增-->
    <insert id="batchInsertUserRole" parameterType="java.util.List" useGeneratedKeys="false">
        insert into st_user_role(user_id,role_id,yn_flag,creator,editor,created_time,modified_time)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
                #{item.userId},
                #{item.roleId},
                #{item.ynFlag},
                #{item.creator},
                #{item.editor},
                #{item.createdTime},
                #{item.modifiedTime}
            )
        </foreach>
    </insert>

    <select id="selectUserNameList" resultType="com.story.storyadmin.domain.entity.sysmgr.User">
        SELECT
          u.id,u.name
        FROM   st_user u
        where  u.yn_flag='1'
    </select>

    <select id="getUserMap" resultType="java.util.Map">
        select
        concat(concat(gen.id,'-'),gen.name) "userUniqueKey",
        gen.id "id",
        gen.name "name",
        gen.avatar "avatar"
        from st_user gen
    </select>


    <!--    getUserMap2与方法getUserMap22比较，该方法查询出来的map的value是map,而方法22查询出来的map的value是Java对象-->
    <select id="getUserMap2" resultType="java.util.Map">
        select
        gen.id "id",
        gen.name "name",
        gen.avatar "avatar"
        from st_user gen
    </select>

    <!--查询返回一条数据，结果为一个对象-->
    <select id="getUserMap21" resultMap="BaseResultMap">
        select
        gen.*
        from st_user gen where gen.id=1
    </select>

    <!--查询返回所有数据，结果为list集合的对象-->
    <select id="getUserMap211" resultMap="BaseResultMap">
        select
        gen.*
        from st_user gen
    </select>

<!--查询返回一条数据，结果为一个map-->
    <select id="getUserMap22" resultMap="BaseResultMap2">
        select
        gen.*
        from st_user gen where gen.id=1
    </select>

<!--查询返回所有数据，结果为list集合的map-->
    <select id="getUserMap23" resultMap="BaseResultMap2">
        select
        gen.*
        from st_user gen
    </select>

    <select id="getUserMap3" resultType="java.util.Map">
        select
        gen.id "id",
        gen.name "name"
        from st_user gen
    </select>

    <select id="getUserMap4" resultType="java.util.Map">
        select
        gen.id "id",
        gen.name "name",
        gen.email "email",
        gen.avatar "avatar"
        from st_user gen
    </select>

<!--不行的-->
    <select id="getUserMap5" resultType="java.util.Map">
        select
        gen.id "id",
        gen.name "name",
        gen.email "email",
        gen.avatar "avatar",
        gen.status "status"
        from st_user gen group by gen.status
    </select>


<!--通常我们会将数据库表的主键id设为自增。在插入一条记录时，我们不设置其主键id，而让数据库自动生成该条记录的主键id，那么在插入一条记录后，
如何得到数据库自动生成的这条记录的主键id呢？有两种方式
1、使用useGeneratedKeys和keyProperty属性
2、使用<selectKey>子标签

如果使用的是mysql这样的支持自增主键的数据库，可以简单的使用第一种方式；对于不支持自增主键的数据库，如oracle，则没有主键返回这一概念，而需要在插入之前先生成一个主键。
此时可以用<selectKey>标签，
设置其order属性为BEFORE，并在标签体内写上生成主键的SQL语句，这样在插入之前，会先处理<selectKey>，生成主键，再执行真正的插入操作。
<selectKey>标签其实就是一条SQL，这条SQL的执行，可以放在主SQL执行之前或之后，并且会将其执行得到的结果封装到入参的Java对象的指定属性上。
注意<selectKey>子标签只能用在<insert>和<update>标签中。上面的LAST_INSERT_ID()实际上是MySQL提供的一个函数，可以用来获取最近插入或更新的记录的主键id。

-->
    <insert id="insertUser" parameterType="com.story.storyadmin.domain.entity.sysmgr.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO st_user (account,name,email) VALUES (#{account},#{name},#{email});
    </insert>

    <insert id="insertUser2" parameterType="com.story.storyadmin.domain.entity.sysmgr.User">
        INSERT INTO st_user (account,name,email) VALUES (#{account},#{name},#{email});
        <selectKey keyProperty="id" order="BEFORE" resultType="long" >
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>




    <!-- #{}里面的数字代表你传入参数的顺序。这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。-->
<!--   select gen.* from st_user gen where gen.name = #{0} and gen.id = #{1} 实际测试执行这样的sql语句会报错！！-->
    <select id="selectUserByNameAndId" resultMap="BaseResultMap">
        select
        gen.*
        from st_user gen where gen.name = #{name} and gen.id = #{id}
    </select>

<!-- #{}里面的名称对应的是注解 @Param括号里面修饰的名称。这种方法在参数不多的情况还是比较直观的，推荐使用。-->
    <select id="selectUserByNameAndId2" resultMap="BaseResultMap">
        select
        gen.*
        from st_user gen where gen.name = #{name} and gen.id = #{id}
    </select>


    <select id="selectUserMapByNameAndId" parameterType="java.util.Map" resultMap="BaseResultMap">
        select
        gen.*
        from st_user gen where gen.name = #{name} and gen.id = #{id}
    </select>

    <select id="selectUserBeanByNameAndId" parameterType="com.story.storyadmin.domain.entity.sysmgr.User" resultMap="BaseResultMap">
        select
        gen.*
        from st_user gen where gen.name = #{name} and gen.id = #{id}
    </select>


    <select id="selectJsonObjectByNameAndId" parameterType="com.alibaba.fastjson.JSONObject" resultMap="BaseResultMap">
        select
        gen.*
        from st_user gen where gen.name = #{jsonObject.name} and gen.id = #{jsonObject.id}
    </select>

    <!--
    item	表示在迭代过程中每一个元素的别名
    index	表示在迭代过程中每次迭代到的位置（下标）
    open	前缀
    close	后缀
    separator	分隔符，表示迭代时每个元素之间以什么分隔
    -->
    <select id="selectUserArrayByIds"  resultMap="BaseResultMap">
        select gen.* from st_user gen where 1=1
        and gen.id in
        <foreach collection="array" item="item" open="(" separator="," close=")" >
            #{item}
        </foreach>
    </select>


    <select id="selectUserList"  resultMap="BaseResultMap">
        select gen.* from st_user gen
        where 1=1
        and gen.id in
        <foreach collection="list" item="item" separator="," open="(" close=")" >
            #{item}
        </foreach>
    </select>

    <select id="selectUserListByNameOrEmail"  resultMap="BaseResultMap">
        select gen.* from st_user gen
        where gen.id=8
        <!--前端传来的name不为null，表示需要根据email筛选，此时Where语句就需要加上这个条件-->
        <if test="name!=null">
            and gen.name=#{name}
        </if>
        <!--email筛选-->
        <if test="email!=null">
            and gen.email=#{email}
        </if>
        <!-- and连接多个判断条件-->
        <if test="account!=null and account!=''">
            and gen.account=#{account}
        </if>
    </select>

<!-- 在 MySQL 中， concat函数支持多参数， 但在 Oracle 中只支持两个参数。那么我们可以使用 bind 来让该 SQL 达到支持两个数据库的作用   -->
<!-- <if test="name != null and name !=''">
       and name like concat('%', #{name}, '%')
     </if>-->
    <select id="selectUserByNameLike"  resultMap="BaseResultMap">
        select * from st_user
        where 1=1
        <if test="name != null and name !=''">
            <bind name="nameLike" value="'%'+name+'%'"/>
            and name like #{nameLike}
        </if>

    </select>

    <select id="selectUserListByNameOrEmail2" resultMap="BaseResultMap">
        select gen.* from st_user gen
        where 1=1
        <choose>
            <!--name不为null时，根据name查找-->
            <when test="name != null">
                AND gen.name=#{name}
            </when>
            <!--email不是null时，根据email查找-->
            <when test="email != null">
                AND gen.email = #{email}
            </when>
            <!--account不是null或者不为‘’时，根据account查找-->
            <when  test="account!=null and account!=''">
                and gen.account=#{account}
            </when >
            <!--如果什么都没传，就筛选id值等于8的数据-->
            <otherwise>
                AND gen.id=8
            </otherwise>
        </choose>
    </select>


    <select id="selectUserListByNameOrEmail3"  resultMap="BaseResultMap">
        select gen.* from st_user gen
        where gen.id=8
        <!--前端传来的name不为null，表示需要根据email筛选，此时Where语句就需要加上这个条件-->
        <if test="name!=null">
            and gen.name=#{name}
        </if>
        <!--email筛选-->
        <if test="email!=null">
            and gen.email=#{email}
        </if>
        <!-- and连接多个判断条件-->
        <if test="account!=null and account!=''">
            and gen.account=#{account}
        </if>
    </select>

    <!--使用 set+if 标签修改后，如果某项为 null 则不进行插入-->
    <insert id="insertUserListByNameOrEmail" parameterType="com.story.storyadmin.domain.entity.sysmgr.User">
        insert into st_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="account != null">
                account,
            </if>
            <if test="avatar != null">
                avatar,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="lastPwdModifiedTime != null">
                last_pwd_modified_time,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="ynflag != null">
                yn_flag,
            </if>
            <if test="erpFlag != null">
                erp_flag,
            </if>
            <if test="creator != null">
                creator,
            </if>
            <if test="editor != null">
                editor,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="modifiedTime != null">
                modified_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id}},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR}},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR}},
            </if>
            <if test="account != null">
                #{account,jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                #{avatar},
            </if>
            <if test="password != null">
                #{password},
            </if>
            <if test="lastPwdModifiedTime != null">
                #{lastPwdModifiedTime},
            </if>
            <if test="status != null">
                #{status},
            </if>
            <if test="ynflag != null">
                #{ynflag},
            </if>
            <if test="erpFlag != null">
                #{erpFlag},
            </if>
            <if test="creator != null">
                #{creator},
            </if>
            <if test="editor != null">
                #{editor},
            </if>
            <if test="createdTime != null">
                #{createdTime},
            </if>
            <if test="modifiedTime != null">
                #{modifiedTime},
            </if>
        </trim>
    </insert>

<!--使用 set+if 标签修改后，如果某项为 null 则不进行更新，而是保持数据库原值-->
    <update id="updateUserByNameOrEmail" parameterType="com.story.storyadmin.domain.entity.sysmgr.User">
        UPDATE st_user
        <set>
            <if test="name!=null and name!='' ">
                NAME = #{name},
            </if>
            <if test="email!=null and email!='' ">
                EMAIL = #{email},
            </if>
            <if test="account!=null and account!='' ">
                account = #{account}
            </if>
        </set>
        WHERE ID = #{id};
    </update>

<!--批量插入  collection="list" 默认collection的值list,如果增加了注解@Param("userLists")，那么collection的值就是取注解里面的值userLists-->
    <insert id="insertUserLists" parameterType="java.util.List">
        insert into st_user(account,name, email)
        values
        <foreach collection="list" item="user" separator=",">
            (
             #{user.account},#{user.name},#{user.email}
            )
        </foreach>
    </insert>

<!--批量需改-->
    <update id="updateUserLists" parameterType="java.util.List" >
        <foreach collection="userLists" separator=";" open="begin" close=";end;" item="user" index="index" >
            update st_user
            <set>
                <if test="user.name !=null and user.name !='' ">
                    NAME =#{user.name}
                </if>
                <if test="user.account !=null and user.account !='' ">
                    ACCOUNT =#{user.account}
                </if>
                <if test="user.email !=null and user.email !='' ">
                    EMAIL =#{user.email}
                </if>
                modified_time =sysdate
            </set>
            where
            ID =#{user.id}
        </foreach>
    </update>

    <!--批量删除 物理删除-->
    <delete id="deleteUserLists" parameterType="java.util.List">
        delet form st_user
        where
        1=1
        <if test="ids !=null and ids.size()>0">
            and id in
            <foreach collection="ids" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </delete>


<!--refid这个属性就是指定<sql>标签中的id值（唯一标识）。-->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM st_user
        <include refid="Example_Where_Clause" />
    </select>

<!--    调用常量类中的常量，就是@+全类名+@+常量。-->
    <select id="selectUseByYnFlag" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM st_user
        where id=8
        <if test="ynFlag!=null and ynFlag==@com.story.storyadmin.constant.CommonConstants@DELETE">
            and yn_flag=#{ynFlag}
        </if>
        <if test="ynFlag!=null and ynFlag==@com.story.storyadmin.constant.CommonConstants@NOT_DELETE">
            and yn_flag=#{ynFlag}
        </if>
    </select>


    <select id="selectTreeList" resultMap="BaseResultMap">
        select
        *
        from st_user
        <where>
            ${ew.sqlSegment}
        </where>
    </select>



</mapper>
