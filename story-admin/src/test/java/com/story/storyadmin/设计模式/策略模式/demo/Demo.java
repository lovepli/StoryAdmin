package com.story.storyadmin.设计模式.策略模式.demo;

/**
 * @author: lipan
 * @date: 2021/8/23
 * @description:
 */
public class Demo {

    /**
     * 策略模式是个啥？
     * 策略模式：英文为Strategy Pattern，是指定义了算法家族、分别封装起来，让他们之间可以相互替换，此设计模式让算法的变化不会影响到使用算法的用户。
     *
     * 大致意思：定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。
     *
     * 在策略模式中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。
     *
     * 策略模式中的角色
     * 从 UML 类图中，我们可以看到，策略模式主要包含三种角色：
     *
     * 上下文角色（Context）：用来操作策略的上下文环境，屏蔽高层模块（客户端）对策略，算法的直接访问，封装可能存在的变化；
     * 抽象策略角色（Strategy）：规定策略或算法的行为；
     * 具体策略角色（ConcreteStrategy）：具体的策略或算法实现；
     *
     * 策略模式优缺点
     * 优点
     *
     * 策略模式符合开闭原则
     * 避免使用多重转换语句，比如：if...else、switch语句。
     * 使用策略模式可以提高算法的保密性和安全性
     * 缺点
     *
     * 客户端必须知道所有策略，并且自行决定使用哪一种策略
     * 代码中产生非常多的策略类，增加后期维护难度
     * 策略模式使用场景
     * 在日常开发中，策略模式适用于以下三种场景：
     *
     * 针对同一类型问题，有多重处理方式，每一种都能独立解决问题。
     * 算法需要自由切换的场景。
     * 需要屏蔽算法规则的场景
     * 这个说起来，还是不太好理解。
     *
     */
}
