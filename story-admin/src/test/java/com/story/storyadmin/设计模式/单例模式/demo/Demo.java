package com.story.storyadmin.设计模式.单例模式.demo;

/**
 * @author: lipan
 * @date: 2021/8/23
 * @description:
 */
public class Demo {
    /**
     * 故事
     * 实话实说，关于单例模式，网上有N多个版本。你估计也看过很多版本。但看完了又能怎样？我技术群里的一位小伙伴，上周面试，就因为一个单例模式，然后叫他回去等通知了。
     *
     * 下面是这位同学被问到的问题：
     *
     * 1、说说单例模式的特点？
     *
     * 2、你知道单例模式的具体使用场景吗？
     *
     * 3、单例模式常见写法有几种？
     *
     * 4、怎么样保证线程安全？
     *
     * 5、怎么不会被反射攻击？
     *
     * 6、怎样保证不会被序列化和反序列化的攻击？
     *
     * 7、枚举为什么会不会被序列化？
     *
     * .....
     *
     * 你也可以尝试行的回答这几个题，看看自己能回答上几个。
     *
     * 定义
     * 单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
     *
     * 这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。
     *
     * 特点：
     *
     * 1、单例类只能有一个实例。
     * 2、单例类必须自己创建自己的唯一实例。
     * 3、单例类必须给所有其他对象提供这一实例
     * 4、隐藏所有的构造方法
     * **目的：**保证一个类仅有一个实例，并提供一个访问它的全局访问点。
     *
     * 案例：一家企业只能有一个CEO，有多个了其实乱套了。
     *
     * 使用场景
     * 需要确保任何情况下都绝对只有一个实例。
     *
     * 比如：ServletContext、ServletConfig、ApplicationContext、DBTool等，都使用到了单列模式。
     *
     * 单例模式的写法
     * 饿汉式
     * 懒汉式（包含双重检查锁、静态内部类）
     * 注册式（以枚举为例）
     */
}
