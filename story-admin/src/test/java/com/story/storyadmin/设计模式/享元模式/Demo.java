package com.story.storyadmin.设计模式.享元模式;

/**
 * @author: lipan
 * @date: 2021/8/23
 * @description:
 */
public class Demo {

    /**
     *
     * 背景
     * 享元模式（Flyweight Pattern）又叫作轻量级模式，是对象池的一种实现。
     *
     * 类似线程池，线程池可以避免不停地创建和销毁多个对象，消耗性能。
     *
     * 享元模式提供了减少对象数量从而改善应用所需的对象结构的方式。
     *
     * 英文解释：
     *
     * Use sharing to support large numbers of fine-grained objects efficiently.
     *
     * 享元模式（Flyweight Pattern）其宗旨是共享细粒度对象，将多个对同一对象的访问集中起来，不必为每个访问者都创建一个单独的对象， 主要用于减少创建对象的数量，以减少内存占用和提高性能。
     *
     * 属于结构性设计模式，其中结构性设计模式有：代理、门面、装饰器、享元、桥接、适配器、组合。
     *
     * 注意：
     *
     * 享元模式把一个对象的状态分成内部状态和外部状态，内部状态是不变的，外部状态是变化的；然后通过共享不变的部分，达到减少对象数量并节约内存的目的。
     *
     * 生活案例
     * 房屋中介
     * 只要是个城市，就少不了房屋中介，房屋中介存有大量的出租房屋信息，并且一家房屋中介往往会有多个门店，但是所有门店都共享这些房屋信息（共享的是出租房屋的信息）。
     *
     * 个人身份证信息
     * 每个中国公民都有一张身份证，并且这张身份证信息在公安系统中是共享的，全国各公安局派出所都会共享你的身份证信息（共享的是个人身份信息）。
     *
     * 高考志愿填报
     * 每所大学在每个省都有明确的招收名额，这些名额对于该省的所有高考生而言都是共享的（共享的是招收名额）。
     *
     * 图书馆
     * 图书馆里的可借书籍，对多有读者是共享的，大家都可以查询此书是否已经被借出去，还剩基本可借（共享的是图书）。
     *
     * 享元模式主要包含3个角色。
     *
     * 抽象享元角色（Book）：享元对象抽象基类或者接口，同时定义出对象的外部状态和内部状态的接口或实现。
     * 具体享元角色（ConcreteBook）：实现抽象角色定义的业务。该角色的内部状态处理应该与环境无关，不会出现一个操作改变内部状态、同时修改了外部状态的情况。
     * 享元工厂（BookFactory）：负责管理享元对象池和创建享元对象。
     *
     *关于享元模式，在JDK中大量的使用，比如：String、Integer、Long等类中，都有使用到。
     * 总结
     * 享元模式，单从概念来讲估计很多人不是很理解，但是从Integer、String已经生活中的场景结合起来理解，就能轻松理解享元模式，享元模式的实现基本上都伴随着一个集合用来存这些对象。
     *
     * 一句话总结：
     *
     * 优化资源配置，减少资源浪费
     */
}
