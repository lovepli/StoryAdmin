package com.story.storyadmin.设计模式.观察者模式;

/**
 * @author: lipan
 * @date: 2020-05-07
 * @description: 观察者模式 像是一种订阅模式
 */
public class Demo {

    /**
     * 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
     * Spring中Observer模式常用的地方是监听器listener的实现。如ApplicationListener,但是监听器和观察者又又区别
     *
     * 定义
     * 观察者模式（Observer Pattern）又叫作发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependent）模式。
     *
     * 定义一种一对多的依赖关系，一个主题对象可被多个观察者对象同时监听，使得每当主题对象状态变化时，所有依赖它的对象都会得到通知并被自动更新，属于行为型设计模式。
     *
     * 观察者模式的核心是将观察者与被观察者解耦，以类似消息/广播发送的机制联动两者，使被观察者的变动能通知到感兴趣的观察者们，从而做出相应的响应。
     *
     * 角色
     * 从UML图中，我们可以总结出，在观察者模式中有以下四个角色：
     *
     * 抽象主题（Subject）：指被观察的对象。该角色是一个抽象类或接口，定义了增加、删除、通知观察者对象的方法。
     * 具体主题（ConcreteSubject）：具体被观察者，当其内部状态变化时，会通知已注册的观察者。
     * 抽象观察者（Observer）：定义了响应通知的更新方法。
     * 具体观察者（ConcreteObserver1、ConcreteObserver1）：当得到状态更新的通知时，会自动做出响应。
     * 下面我们来看看一个写生活中的观察者模式的场景。
     *
     * 观察者模式的应用场景
     * 观察者模式在现实生活中的应用也非常广泛，比如：各种APP上的各种消息提示、学校铃声、公众号文章提示、各大网站消息提示等。
     *
     * 在软件系统中，当系统一方行为依赖另一方行为的变动时，可使用观察者模式松耦合联动双方，使得一方的变动可以通知到感兴趣的另一方对象，从而让另一方对象对此做出响应。
     *
     * 观察者模式主要适用于以下应用场景。
     *
     * 当一个抽象模型包含两方面内容，其中一方面依赖另一方面。
     * 其他一个或多个对象的变化依赖另一个对象的变化。
     * 实现类似广播机制的功能，不需要知道具体收听者，只需分发广播，系统中感兴趣的对象会自动接收该广播。
     * 多层级嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知。
     */
}
