package com.story.storyadmin.设计模式.责任链模式;

/**
 * @author: lipan
 * @date: 2021/8/23
 * @description:
 */
public class Demo {

    /**
     * 什么是责任链模式呢
     * 责任链模式（Chain of Responsibility Pattern）将链中每一个节点都看作一个对象，每个节点处理的请求均不同，且内部自动维护下一个节点对象。当一个请求从链式的首端发出时，会沿着责任链预设的路径依次传递到每一个节点对象，直至被链中的某个对象处理为止，属于行为型设计模式。
     *
     *从UML图中，我们又可以看出，责任链模式中有两个非常重要的角色：
     *
     * (1)、抽象处理者角色（Handler）
     *
     * 定义处理请求的接口。接口可以也可以给出一个方法以设定和返回对下个对象引用。这个角色通常由一个Java抽象类或者Java接口实现。
     *
     * (2)、具体处理者角色（HandlerA、HandlerB、HandlerC）
     *
     * 具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下个对象。由于具体处理者持有对下家的引用。
     *
     * 责任链模式的优缺点
     * 优点：请求和处理分开，两者解耦，提供系统的灵活性。
     * 缺点：性能能问，一个链非常长的时候，非常耗时。因为我们避免建立很长的链。
     * 生活中的案例
     * 在日常生活中，责任链模式是比较常见的。我们平时处理工作中的一些事务，往往是各部门协同合作来完成某一个任务的。而每个部门都有各自的职责，因此，很多时候事情完成一半，便会转交到下一个部门，直到所有部门都审批通过，事情才能完成。
     *
     * 责任链模式主要解耦了请求与处理，客户只需将请求发送到链上即可，不需要关心请求的具体内容和处理细节，请求会自动进行传递，直至有节点对象进行处理。
     *
     * 责任链模式主要适用于以下应用场景:
     *
     * 多个对象可以处理同一请求，但具体由哪个对象处理则在运行时动态决定。
     * 在不明确指定接收者的情况下，向多个对象中的一个提交请求。
     * 可动态指定一组对象处理请求。
     */
}
